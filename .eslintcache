[{"C:\\Users\\пк\\pagination\\src\\App.js":"1","C:\\Users\\пк\\pagination\\src\\index.js":"2"},{"size":1181,"mtime":1606217774013,"results":"3","hashOfConfig":"4"},{"size":197,"mtime":1606215287446,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1fdzwwf",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\пк\\pagination\\src\\App.js",["11"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nfunction App(){\n  const [messages, setMessages] = useState([])\n  const [currentPage, setCurrentPage ] = useState(1)\n  const [fetching, setFetching] = useState(true)\n\n\n\nuseEffect(( ) => {\n  if(fetching) {\n    axios.get(`https://jsonplaceholder.typicode.com/comments?_limit=23&_page=${currentPage}`)\n    .then(response => \n      setMessages([...messages, ...response.data]),\n      setCurrentPage( prevState => prevState + 1))\n\n      .finally( () => setFetching (false));\n  }  \n},[fetching])\n\nuseEffect(() => {\n  document.addEventListener('scroll', scrollHandler)\n  return function()\n  {\n    document.removeEventListener('scroll', scrollHandler)\n  };\n}, [])\n\n  const scrollHandler = (e) => {\n    if(e.target.documentElement.scrollHeight - (e.target.documentElement.scrollTop + window.innerHeight) < 100 ){\n      setFetching(true);\n    }\n\n  }\n\n  return(\n    <div className = {'app'}>\n      {messages.map(message =>\n        <div key={message.id}>\n            <div className = \"message\"> {message.id}. {message.body}</div>\n        </div>\n        )}\n    </div>\n  );\n}\n\nexport default App;","C:\\Users\\пк\\pagination\\src\\index.js",[],{"ruleId":"12","severity":1,"message":"13","line":21,"column":3,"nodeType":"14","endLine":21,"endColumn":13,"suggestions":"15"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPage' and 'messages'. Either include them or remove the dependency array. You can also do a functional update 'setMessages(m => ...)' if you only need 'messages' in the 'setMessages' call.","ArrayExpression",["16"],{"desc":"17","fix":"18"},"Update the dependencies array to be: [currentPage, fetching, messages]",{"range":"19","text":"20"},[577,587],"[currentPage, fetching, messages]"]